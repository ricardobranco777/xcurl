#!/usr/bin/env python
"""
Get html from dynamic pages
"""

import argparse
import os
import shlex
import shutil
import subprocess
import sys

from concurrent.futures import ThreadPoolExecutor
from subprocess import DEVNULL
from urllib.parse import urlparse

from pyvirtualdisplay import Display
from selenium.webdriver import firefox
from selenium.common.exceptions import WebDriverException
from selenium.webdriver.support.ui import WebDriverWait


VERSION = "1.1"


def is_container() -> bool:
    '''Returns True if we're inside a Podman/Docker container, False otherwise.'''
    return os.getenv("container") == "podman" or os.path.isfile("/.dockerenv")


def xget(url, debug=False, insecure=False, user_agent=None, timeout=5, output_file=None):
    """
    Get url
    """
    if not urlparse(url).scheme:
        url = f"https://{url}"
    service = firefox.service.Service(log_output=sys.stderr if debug else DEVNULL)
    options = firefox.options.Options()
    options.add_argument("--headless")
    if user_agent is not None:
        options.set_preference("general.useragent.override", user_agent)
    options.accept_untrusted_certs = insecure
    with firefox.webdriver.WebDriver(
            options=options,
            service=service
    ) as browser:
        try:
            browser.get(url)
            initial_content = browser.page_source
            WebDriverWait(browser, timeout).until(
                lambda driver: driver.page_source != initial_content
            )
        except WebDriverException as err:
            sys.exit(f"ERROR: {err}")
        if output_file:
            output_file.write(browser.page_source)
        else:
            url = urlparse(url)
            filename = os.path.basename(url.path) or "index"
            if url.query:
                filename += f"?{url.query}"
            filename = filename.replace(os.sep, "_")
            content_type = browser.execute_script("return document.contentType;").split('/')[1]
            if not filename.endswith(content_type):
                filename = f"{filename}.{content_type}"
            try_filename = filename
            counter = 1
            while os.path.exists(try_filename):
                try_filename = f"{filename}.{counter}"
                counter += 1
            filename = try_filename
            with open(filename, "w", encoding="utf-8") as file:
                file.write(browser.page_source)


def print_versions():
    '''Print useful information for debugging'''
    print(f'{os.path.basename(sys.argv[0])} {VERSION}')
    print(f'Python {sys.version}')
    print(subprocess.check_output(shlex.split("geckodriver --version")).decode("utf-8").splitlines()[0])
    with open("/etc/os-release", encoding="utf-8") as file:
        osrel = {k: v.strip('"') for k, v in [line.split('=') for line in file.read().splitlines()]}
    print(osrel['NAME'], osrel['VERSION_ID'])


def main():
    """
    Main function
    """
    if opts.output:
        if opts.output == "-":
            opts.output = sys.stdout
        else:
            opts.output = open(opts.output, "a", encoding="utf-8")  # pylint: disable=consider-using-with
    # ProcessPoolExecutor doesn't work well with lambda's
    with ThreadPoolExecutor() as executor:
        executor.map(
            lambda url: xget(
                url,
                debug=opts.debug,
                insecure=opts.insecure,
                user_agent=opts.user_agent,
                timeout=opts.timeout,
                output_file=opts.output,
            ),
            opts.url,
        )


def parse_opts():
    """
    Parse options and arguments
    """
    parser = argparse.ArgumentParser()
    parser.add_argument(
        '--debug', action='store_true',
        help="Enable debug")
    parser.add_argument(
        '--insecure', action='store_true',
        help="Allow insecure server connections when using SSL")
    parser.add_argument(
        '-O', '--output',
        help="output file")
    parser.add_argument(
        '-t', '--timeout', type=int, default=5,
        help="Timeout in seconds")
    parser.add_argument(
        '-U', '--user-agent',
        help="User agent")
    parser.add_argument(
        '-V', '--version', action='store_true',
        help="Show version and exit")
    parser.add_argument('url', nargs='*')
    return parser.parse_args()


if __name__ == "__main__":
    opts = parse_opts()
    if not shutil.which("geckodriver"):
        sys.exit("You must install geckodriver anywhere in your PATH", file=sys.stderr)
    if opts.version:
        print_versions()
        sys.exit(0)
    if not opts.url:
        sys.exit("Missing URL argument")
    try:
        if is_container():
            with Display():
                main()
        else:
            main()
    except KeyboardInterrupt:
        sys.exit(1)
    finally:
        if opts.output:
            opts.output.close()
