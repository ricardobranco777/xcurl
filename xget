#!/usr/bin/env python
"""
Get html from dynamic pages
"""

import argparse
import re
import os
import sys
import time

from concurrent.futures import ProcessPoolExecutor as Executor
from urllib.parse import urlparse

from selenium import webdriver
from selenium.common.exceptions import WebDriverException


def get(url):
    """
    Get url
    """
    if not urlparse(url).scheme:
        url = "https://%s" % url
    options = webdriver.FirefoxOptions()
    options.headless = True
    if opts.user_agent is not None:
        options.set_preference("general.useragent.override", opts.user_agent)
    profile = webdriver.FirefoxProfile()
    if opts.insecure:
        profile.accept_untrusted_certs = True
        profile.assume_untrusted_cert_issuer = True
    with webdriver.Firefox(
            options=options,
            firefox_profile=profile,
            service_log_path=None if opts.debug else os.devnull
    ) as browser:
        try:
            browser.get(url)
        except WebDriverException as err:
            sys.exit("ERROR: %s" % err)
        time.sleep(opts.timeout)
        if opts.output:
            opts.output.write(browser.page_source)
        else:
            filename = os.path.basename(urlparse(url).path) or "index.html"
            if re.match("<(!DOCTYPE )?html", browser.page_source, re.I) and \
                    not re.search(r"\.html?$", url, re.I):
                filename = "%s.html" % filename
            with open(filename, "w") as file:
                file.write(browser.page_source)


def main():
    """
    Main function
    """
    if opts.output:
        if opts.output == "-":
            opts.output = sys.stdout
        else:
            opts.output = open(opts.output, "a")  # pylint: disable=consider-using-with
    with Executor() as executor:
        executor.map(get, opts.url)


def parse_opts():
    """
    Parse options and arguments
    """
    parser = argparse.ArgumentParser()
    parser.add_argument(
        '--debug', action='store_true',
        help="Enable debug")
    parser.add_argument(
        '--insecure', action='store_true',
        help="Allow insecure server connections when using SSL")
    parser.add_argument(
        '-O', '--output',
        help="output file")
    parser.add_argument(
        '-t', '--timeout', type=int, default=2,
        help="Timeout in seconds")
    parser.add_argument(
        '-U', '--user-agent',
        help="User agent")
    parser.add_argument('url', nargs='+')
    return parser.parse_args()


if __name__ == "__main__":
    opts = parse_opts()
    try:
        main()
    except KeyboardInterrupt:
        sys.exit(1)
    finally:
        if opts.output:
            opts.output.close()
